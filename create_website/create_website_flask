#!/bin/bash


#-----------------------------------------------------------------------------
#-----------------------------------------------------------------------------
#-----------------------------------------------------------------------------
# Creating the top-level application file
#-----------------------------------------------------------------------------
#-----------------------------------------------------------------------------
#-----------------------------------------------------------------------------
create_app_file() {
	mkdir -p $1
	exec 1> "$1/$2".py
	cat<<-END
	from app import create_app

	app = create_app()
	END
	return	
}






#-----------------------------------------------------------------------------
#-----------------------------------------------------------------------------
#-----------------------------------------------------------------------------
# Creating the app-level init file
#-----------------------------------------------------------------------------
#-----------------------------------------------------------------------------
#-----------------------------------------------------------------------------
create_app_level_init_file() {
	exec 1> "$1/__init__".py
	cat<<-END
	from config import Config
	import logging
	from logging.handlers import RotatingFileHandler
	import os
	from flask import Flask

	def create_app(config_class=Config):
	    app = Flask(__name__)
	    app.config.from_object(config_class)

	    from app.errors import bp as errors_bp
	    app.register_blueprint(main_bp)

	    from app.main import bp as main_bp
	    app.register_blueprint(main_bp)

	    if not app.debug and not app.testing:
	        if not os.path.exists('logs'):
	            os.mkdir('logs')
	        file_handler = RotatingFileHandler('logs/$2.log',\\
	            maxBytes=10240, backupCount=10)
	        file_handler.setFormatter(logging.Formatter(
	            '%(asctime)s %(levelname)s:' \\
	                '%(message)s [in %(pathname)s:%(lineno)d]'))
	        file_handler.setLevel(logging.INFO)
	        app.logger.addHandler(file_handler)

	        app.logger.setLevel(logging.INFO)
	        app.logger.info('$2 startup')

	    return app
	END
	return	
}







#-----------------------------------------------------------------------------
#-----------------------------------------------------------------------------
#-----------------------------------------------------------------------------
# Creating the configuration file
#-----------------------------------------------------------------------------
#-----------------------------------------------------------------------------
#-----------------------------------------------------------------------------
create_config_file() {
	exec 1> "$1"/config.py
	cat<<-END
	import os
	from dotenv import load_dotenv

	basedir = os.path.abspath(os.path.dirname(__file__))
	load_dotenv(os.path.join(basedir, '.env'))

	class Config(object):
	    SECRET_KEY = os.environ.get('SECRET_KEY') or 'password'	
	END
	return
}




#-----------------------------------------------------------------------------
#-----------------------------------------------------------------------------
#-----------------------------------------------------------------------------
# Creating the index page html and css files
#-----------------------------------------------------------------------------
#-----------------------------------------------------------------------------
#-----------------------------------------------------------------------------
create_index_html() {
	mkdir $3/templates
	mkdir $3/static
	mkdir $3/static/styles
	exec 1> "$3/templates/$2".html
	cat<<-END
	<!doctype html>
	<html>
	        <head>
	                <title>$1</title>
	                <meta name="viewport" content="width=device-width">
	                <link rel='stylesheet' href="$3/static/styles/$2.css">
	        </head>
	        <body>
	                <div id='opening'>
	                        <div id='nav'>
	                                <ul>
	                                        <li>Home</li>
	                                </ul>
	                        </div>
	                </div>
	                <div id='content'>
	                        <div id='features'>
	                        </div>
	                        <div class='feature1'>
	                                <p class='feature'>Text 1</p>
	                        </div>
	                        <div class='feature2'>
	                                <p class='feature'>Text 2</p>
	                        </div>
	                        <div class='feature3'>
	                                <p class='feature'>Text 3</p>
	                        </div>
	                </div>    
	        </body>
	</html>
	END
	return
}


create_index_css() {
	exec 1> "$2/static/styles/$1".css
	cat<<-END
* {
        box-sizing: border-box;
}

body {
        font-size: 1.3rem;
        padding: 1rem .5rem;
        line-height: 1.2;
        max-width: 60rem;
        margin: 0 auto;
        color: #333333;
        background-color: $3;
}

#nav {
        padding: 1rem .5rem;
        margin: 0 auto;
        color: #333333;
        text-align: center;
        border-bottom: 8px double #f9f9f9;
        margin-bottom: 2rem;
}

li {
        display: inline;
}

#content {
        overflow: auto;
        height: 100%;
}

#features {
        padding: 1rem .5rem;
        margin: 0 auto;
}

.feature1, .feature2, .feature3 {
        width: 33.33%;
        float: left;
        margin: 0 auto;
}

p.feature {
        text-align: center;
}

@media screen and (min-width: 15rem) {
        body {
                border-left: 4px solid #f9f9f9;
                border-right: 4px solid #f9f9f9;
                padding: 1rem 2rem;
        }
}

	END
	return
}


#top-level application file user input----------------------------------------
#-----------------------------------------------------------------------------
echo "Where will you be putting these files (absolute path)?"

# Turning the read output to an array, with each element separated by '/'
IFS='/' read -ra location

# Assign a variable to the array and then remove last element
location_array=("${location[@]}"); unset "location_array[-1]"

# Join the location_array elements by '/' characters and assign this string
# to a variable location_array_string
location_array_string=`( IFS=$'/'; echo "${location_array[*]}" )`

desired_location=`( IFS=$'/'; echo "${location[*]}" )`

# Confirm that variable location_array_string is a directory
if [ -d ${location_array_string} ]; then
	echo "Your directory ${desired_location} is being created"

	echo "What will be the name of your top level application file?"
	read app_name
		
	#html and css files user input----------------------------------------
	#---------------------------------------------------------------------
	echo "What is the name of the webpage?"
	read webpage_name
	
	echo "What is the title of this webpage? "
	read webpage_title
	
	echo "Which hexidecimal background color for your $webpage_name page?"
	read background_color

	if [ "${#background_color}" -eq 7 ]; then
		if [[ "${background_color:0:1}" == "#" ]]; then
			pattern='[0123456789ABCDEFabcdef]'
			
			for (( i=1; i<${#background_color}; i=i+1 )); do

				if [[ "${background_color:$i:1}" \
					=~ $pattern ]]; then continue
				else
					echo "Error: Problem "\
						"with hexidecimal input"
					break
				fi
			done

			if [[ $i == 7 ]]; then
				create_app_file "$desired_location" "$app_name"
				create_app_level_init_file "$desired_location" "$app_name" 
				create_config_file "$desired_location"
				create_index_html "$webpage_title" "$webpage_name" \
					"$desired_location"
				create_index_css "$webpage_name" "$desired_location" \
					"$background_color"
				cp ./requirements.txt "$desired_location"
			fi
			
		else
			echo "Error: The first character needs to be a #"
		fi
	else
		echo "Error: Problem with the length of your input"
	fi	
else
	echo "Error: What you've input is not a directory"
fi


