#!/bin/bash


#-----------------------------------------------------------------------------
#-----------------------------------------------------------------------------
#-----------------------------------------------------------------------------
# Creating the top-level application file
#-----------------------------------------------------------------------------
#-----------------------------------------------------------------------------
#-----------------------------------------------------------------------------
create_app_file() {
	mkdir -p $1
	exec 1> "$1/$2".py
	cat<<-END
	from app import create_app

	app = create_app()
	END
	return	
}




#-----------------------------------------------------------------------------
#-----------------------------------------------------------------------------
#-----------------------------------------------------------------------------
# Creating the configuration file
#-----------------------------------------------------------------------------
#-----------------------------------------------------------------------------
#-----------------------------------------------------------------------------
create_config_file() {
	exec 1> "$1"/config.py
	cat<<-END
	import os
	from dotenv import load_dotenv

	basedir = os.path.abspath(os.path.dirname(__file__))
	load_dotenv(os.path.join(basedir, '.env'))

	class Config(object):
	    SECRET_KEY = os.environ.get('SECRET_KEY') or 'password'	
	END
	return
}




#-----------------------------------------------------------------------------
#-----------------------------------------------------------------------------
#-----------------------------------------------------------------------------
# Creating the html and css files
#-----------------------------------------------------------------------------
#-----------------------------------------------------------------------------
#-----------------------------------------------------------------------------
create_html() {
	mkdir $3/templates
	mkdir $3/static
	mkdir $3/static/styles
	exec 1> "$3/templates/$2".html
	cat<<-END
	<!doctype html>
	<html>
	        <head>
	                <title>$1</title>
	                <meta name="viewport" content="width=device-width">
	                <link rel='stylesheet' href="$3/static/styles/$2.css">
	        </head>
	        <body>
	                <div id='opening'>
	                        <div id='nav'>
	                                <ul>
	                                        <li>Home</li>
	                                        <li>Other Page</li>
	                                        <li>Another Page</li>
	                                </ul>
	                        </div>
	                </div>
	                <div id='content'>
	                        <div id='features'>
	                        </div>
	                        <div class='feature1'>
	                                <p class='feature'>Hello $2</p>
	                        </div>
	                        <div class='feature2'>
	                                <p class='feature'>Hello $2 again</p>
	                        </div>
	                        <div class='feature3'>
	                                <p class='feature'>And for the last time</p>
	                        </div>
	                </div>    
	        </body>
	</html>
	END
	return
}


create_css() {
	exec 1> "$2/static/styles/$1".css
	cat<<-END
* {
        box-sizing: border-box;
}

body {
        font-size: 1.3rem;
        padding: 1rem .5rem;
        line-height: 1.2;
        max-width: 60rem;
        margin: 0 auto;
        color: #333333;
        background-color: $3;
}

#nav {
        padding: 1rem .5rem;
        margin: 0 auto;
        color: #333333;
        text-align: center;
        border-bottom: 8px double #f9f9f9;
        margin-bottom: 2rem;
}

li {
        display: inline;
}

#content {
        overflow: auto;
        height: 100%;
}

#features {
        padding: 1rem .5rem;
        margin: 0 auto;
}

.feature1, .feature2, .feature3 {
        width: 33.33%;
        float: left;
        margin: 0 auto;
}

p.feature {
        text-align: center;
}

@media screen and (min-width: 15rem) {
        body {
                border-left: 4px solid #f9f9f9;
                border-right: 4px solid #f9f9f9;
                padding: 1rem 2rem;
        }
}

	END
	return
}


#top-level application file user input----------------------------------------
#-----------------------------------------------------------------------------
echo "Where will you be putting these files (absolute path)?"

# Turning the read output to an array, with each element separated by '/'
IFS='/' read -ra location

# Assign a variable to the array and then remove last element
location_array=("${location[@]}"); unset "location_array[-1]"

# Join the location_array array elements to a string and assign this string
# to a variable b
location_array_string=`( IFS=$'/'; echo "${location_array[*]}" )`

desired_location=`( IFS=$'/'; echo "${location[*]}" )`

# Confirm that variable b is a directory
if [ -d ${location_array_string} ]; then
	echo "Your directory ${desired_location} is being created"

	echo "What will be the name of your top level application file?"
	read app_name
		
	#html and css files user input----------------------------------------
	#---------------------------------------------------------------------
	echo "What is the name of the webpage?"
	read webpage_name
	
	echo "What is the title of this webpage? "
	read webpage_title
	
	echo "Which hexidecimal background color for your $webpage_name page?"
	read background_color

	if [ "${#background_color}" -eq 7 ]; then
		if [[ "${background_color:0:1}" == "#" ]]; then
			pattern=[0123456789ABCDEFabcdef]
			
			if [[ "${background_color:1:6}" =~ $pattern ]]; then

			create_app_file "$desired_location" "$app_name"
			create_config_file "$desired_location"
			create_html "$webpage_title" "$webpage_name" "$desired_location"
			create_css "$webpage_name" "$desired_location" "$background_color"
		else
			echo "Problem with hexidecimal input"
		fi
	else
		echo "Problem with length"
	fi	
else
	echo "Error: What you've input is not a directory"
fi


